name: Continuous Integration
on: [pull_request]

permissions:
  id-token: write
  contents: read
  checks: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.4
      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: PNPM
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: PNPM
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Validate Packages
        run: pnpm manypkg check

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['doubles.jest', 'doubles.sinon', 'core.unit', 'doubles.vitest', 'di.nestjs', 'di.inversify', 'unit']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: PNPM
        run: pnpm install --frozen-lockfile

      - name: Create Coverage Directory
        run: mkdir -p ${{ github.workspace }}/coverage

      - name: Test
        run: pnpm --filter @contractual/${{ matrix.project }} run test
        env:
          JEST_JUNIT_OUTPUT_NAME: ${{ matrix.project }}.xml
          JEST_JUNIT_OUTPUT_DIR: ${{ github.workspace }}/test-reports
          JUNIT_OUTPUT_NAME: ${{ matrix.project }}
          JUNIT_OUTPUT_DIR: ${{ github.workspace }}/test-reports
          COVERAGE_DIR: ${{ github.workspace }}/coverage
          COVERAGE_FILE: coverage-${{ matrix.project }}.xml

      - name: Tests Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          reporter: 'jest-junit'
          name: Tests Results (${{ matrix.project }})
          path: ${{ github.workspace }}/test-reports/${{ matrix.project }}.xml
          fail-on-error: false

#      - name: Upload Report to Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          name: codecov-umbrella
#          flags: ${{ matrix.project }}
#          token: ${{ secrets.CODECOV_TOKEN }}
#          fail_ci_if_error: true
#          files: ${{ github.workspace }}/coverage/coverage-${{ matrix.project }}.xml
#          verbose: true
